Optimal solution :-
TC : O(n)
SC : O(n)

	static int repeat(int array[], int n)
	{
		boolean visit[] = new boolean[n]; 

		for(int i = 0; i < n; i++)
		{
			if(visit[array[i]])
				return array[i];
			visit[array[i]] = true;
		}

		return -1;
	}


Native approach : 

Time Complexity: O(n)
Auxiliary Space: O(1)

           static int repeat(int array[], int n){

            for(int i = 0 ; i < n ; i++)
            {

                   for(int j = i + 1 ; j < n ; j++)
                   {
                          if(array[i] == array[j])
                          {
                           return array[i];
                          }
                 }
            }

           }


Native approach 3 :
Time Complexity: O(n)
Auxiliary Space: O(1)



sort the array and only check arr[i] == arr[i + 1] and return arr[i];

but condition is don't modify the array.so this is not fit. 