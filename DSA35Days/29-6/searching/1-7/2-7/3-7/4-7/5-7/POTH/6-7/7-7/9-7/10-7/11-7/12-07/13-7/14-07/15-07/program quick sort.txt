Kth smallest element

static int partition(int arr[], int l, int h)
    {   
      
      
      int pivot=arr[h];
      
        int i=l-1;
        
        for(int j=l;j<=h-1;j++)
        {
            if(arr[j]<pivot)
            {
                i++;
                int temp = arr[i];
                
                arr[i] = arr[j];
                
                arr[j] = temp;
            }
        }
        int temp=arr[i+1];
        
        arr[i+1]=arr[h];
        
        arr[h]=temp;
        return i+1;
    }

    public static int kthSmallest(int[] arr, int l, int r, int k) 
    { 
        
          l = 0;
        
          r = arr.length - 1;
        
         while(l <= r)
        {
             int p = partition(arr, l ,r);
             if(p == k-1)
                 return arr[p];
             else if(p > k - 1)
            
                 r = p -1;
             else
                 l = p + 1;
            
         }
        
         return -1;
    //Arrays.sort(arr);
   // return arr[k - 1];
    } 
}


Naive Partition :-

void partition(int arr[] , int l , int h , int p)
{

           int temp = [h - l + 1];
           int index = 0;

  for(int i = l ; i <= h; i++)


       if(arr[i] <= arr[p]
         {

              temp[index] = arr[i];
              index++;
         }
    
  for(int i = l ; i <= h ; i++)

        if(arr[i] > arr[p]

        {
              temp[index] = arr[i];
              index++;

        }

  for(int i = l; i <= h; i++)
       

       arr[i]  = temp[i - l];
 
}


lomuto partition:-

int lpartition(int arr[] , int l , int h)

{

      int pivot = arr[h];

      int i = l -1;

 for(int j = l ; j < n-1 ; j++)
{

           if(arr[j] < pivot)
           {
              i++;
              arr[i] = arr[j]

            }

}

   swap(arr[i+1],arr[h]);

    return i+1;

}

Hoare partiton:-

int Hpartition(int arr[] , int l , int h)
{

    int pivot = arr[i];
     
    int i = l -1;
    int j = h + 1;
   
    while(true)
       do{
               i++

         }while(arr[j] < pivot)

       do{
               j--

          }while(arr[j] < pivot)

        if(i >= j
         return j;


    swap(arr[i] , arr[j]);

}